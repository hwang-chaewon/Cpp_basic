#include <iostream>
using namespace std;
int main() {
	/*
	<new연산자>
	어떤 데이터형을 원하는지 new연산자에게 알려주면,
	new연산자는 그에 알맞은 크기의 메모리 블록을 찾아내고
	그 블록의 주소를 리턴함
	*/
	//new를 이용한 포인터 변수 초기화
	int* pointer = new int; //int형 데이터를 저장할 수 있는 새로운(new) 메모리가 필요하다
	//이 경우 pointer가 데이터의 객체를 지시하고 있다고 표현

	/*
	<delete연산자>
	사용한 메모리를 다시 메모리 폴로 환수(대여해서 쓴 다음 다른 사람도 쓸 수 있게 반납하는 개념이라고 이해함)
	환수된 메모리: 프로그램의 다른 부분이 다시 사용할 수 있음
	*/
	int* ps = new int;
	delete ps;

	/*
	<new와 delete>
	new로 대입하지 않은 메모리는 delete로 해제 불가
	같은 메모리 블록을 연달아 두 번 delete로 해제 불가
	new[]로 메모리를 대입할 경우 delete[]로 해제
	new에서 []를 사용하지 않았다면 delete도 []사용 불가
	*/

	//예제
	double* p3 = new double[3];//double형 데이터 3개를 저장할 수 있는 공간 대입
	//p3를 배열 이름처럼 취급
	p3[0] = 0.2;
	p3[1] = 0.5;
	p3[2] = 0.8;
	cout << "p3[1] is " << p3[1] << ".\n";
	/*
	포인터 증가시키기
	p3[0]의 값이 0.5가 되고, p3[1]의 값이 0.8이 되는 등 하나씩 앞으로 밀림
	p3가 배열이라면 틀린 문장이지만 p3가 포인터라면 변수처럼 사용되므로 값 변경 가능
	*/
	p3 = p3 + 1;
	cout << "Now p3[0] is " << p3[0] << " and ";
	cout << "p3[1] is " << p3[1] << ".\n";
	p3 = p3 - 1;//다시 시작 위치를 지시
	delete[]p3;//배열 메모리 해제. new에서 []를 사용했으므로 delete[]

	return 0;
}
